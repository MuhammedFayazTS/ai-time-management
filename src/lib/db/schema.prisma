generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String?
  name       String?
  timezone   String?
  sleepStart String?
  sleepEnd   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  activities   UserActivity[]
  schedules    UserSchedule[]
  activityLogs ActivityLog[]
}

// auth models

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// other models

enum Priority {
  low
  medium
  high
}

enum DayOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

model UserActivity {
  id             String    @id @default(uuid())
  userId         String
  name           String
  description    String?
  preferredStart String?
  preferredEnd   String?
  customDuration Int?
  priority       Priority
  createdAt      DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  schedules    UserSchedule[]
  activityLogs ActivityLog[]
  days         UserActivityDay[] 

  @@unique([userId, name])
}

model UserActivityDay {
  id            String     @id @default(uuid())
  activityId    String
  dayOfWeek     DayOfWeek

  activity      UserActivity @relation(fields: [activityId], references: [id])

  @@unique([activityId, dayOfWeek])
}

model UserSchedule {
  id             String   @id @default(uuid())
  userId         String
  userActivityId String
  startTime      String // "HH:mm"
  endTime        String // "HH:mm"
  aiConfidence   Float?
  version        Int      @default(1)
  isUserApproved Boolean  @default(false)
  createdAt      DateTime @default(now())

  user         User              @relation(fields: [userId], references: [id])
  userActivity UserActivity      @relation(fields: [userActivityId], references: [id])
  days         UserScheduleDay[]

  @@unique([userId, userActivityId, startTime, endTime])
}

model UserScheduleDay {
  id         String    @id @default(uuid())
  scheduleId String
  dayOfWeek  DayOfWeek

  schedule UserSchedule @relation(fields: [scheduleId], references: [id])

  @@unique([scheduleId, dayOfWeek])
}

model ActivityLog {
  id             String   @id @default(uuid())
  userId         String
  userActivityId String
  date           DateTime
  startTime      String // "HH:mm"
  endTime        String // "HH:mm"
  notes          String?
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  userActivity UserActivity @relation(fields: [userActivityId], references: [id])
}
